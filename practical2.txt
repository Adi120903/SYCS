a. Program using Classes
Program:
using System;
namespace sycs
{
class Employee
{
public string name;
public void work(string work)
{
Console.WriteLine("Work: " + work);
}
}
class EmployeeDrive
{
static void Main(string[] args)
{
// create Employee object
Employee e1 = new Employee();
Console.WriteLine("Employee 1");
// set name of the Employee
e1.name = "Gloria";
Console.WriteLine("Name: " + e1.name);
//call method of the Employee
e1.work("Coding");
Console.ReadLine();
}
}
}

b. Constructor and Function Overloading
1. Constructor Overloading
Program:
using System;
namespace sycs
{
class gamescore
{
string user;
int age;
//Default Constructor
public gamescore()
{
user = "John";
age = 25;
Console.WriteLine("\nPrevious User {0} and he was {1} year old", user, age);
}
//Parameterized Constructor
public gamescore(string name, int age1)
{
user = name;
age = age1;
Console.WriteLine("\nCurrent User {0} and he is {1} year old", user, age);
}
}
class sycs
{
static void Main(string[] args)
{
//Default Constructor Called
gamescore gs = new gamescore();
//Overloaded Constructor.
gamescore gs1 = new gamescore("Ram", 30);
Console.ReadLine();
}
}
}

2. Function Overloading
Program:
using System;
namespace sycs
{
class shape
{
public void Area(int side)
{
int square_area = side * side;
Console.WriteLine("\nThe Area of Square is :" + square_area);
}
public void Area(int length, int breadth)
{
int rect_area = length * breadth;
Console.WriteLine("\nThe Area of Rectangle is :" + rect_area);
}
public void Area(double radius)
{
double circle_area = 3.14 * radius * radius;
Console.WriteLine("\nThe Area of Circle is :" + circle_area);
}
}
class sycs
{
static void Main(string[] args)
{
shape s = new shape();
s.Area(10);
s.Area(10, 20);
s.Area(10.8);
Console.ReadKey();
}
}
}

c. Inheritance:
Program:
using System;
namespace sycs
{
class sycs
{
static void Main(string[] args)
{
Scooter sc = new Scooter();
sc.ScooterType();
Car c = new Car();
c.CarType();
Console.ReadKey();
}
}
//Creating Base Class
class Tyre
{
protected void TyreType()
{
Console.WriteLine("This is Tubeless Tyre");
}
}
//Creating Child Class
class Scooter : Tyre
{
public void ScooterType()
{
Console.WriteLine("\nScooter Color is Red");
TyreType();
}
}
//Creating Child Class
class Car : Tyre
{
public void CarType()
{
Console.WriteLine("\n\nCar Type : Ferrari");
TyreType();
}
}
}

d. Namespacses:
1. Example of namespace in C# where one namespace program accesses another namespace program.
Program:
using System;
namespace First
{
public class Hello
{
public void sayHello()
{
Console.WriteLine("Hello First Namespace");
}
}
}
namespace Second
{
public class Hello
{
public void sayHello()
{
Console.WriteLine("Hello Second Namespace");
}
}
}
public class TestNamespace
{
public static void Main(String[] args)
{
First.Hello h1 = new First.Hello();
Second.Hello h2 = new Second.Hello();
h1.sayHello();
h2.sayHello();
}
}

2. Example of namespace where we are using "using" keyword so that we don't have to use a complete name
for accessing a namespace program.
Program:
using System;
using First;
using Second;
namespace First
{
public class Hello
{
public void sayHello()
{
Console.WriteLine("Hello Namespace");
}
}
}
namespace Second
{
public class Welcome
{
public void sayWelcome()
{
Console.WriteLine("Welcome Namespace");
}
}
}
public class TestNamespace
{
public static void Main(String[] args)
{
Hello h1 = new Hello();
Welcome w1 = new Welcome();
h1.sayHello();
w1.sayWelcome();
}
}